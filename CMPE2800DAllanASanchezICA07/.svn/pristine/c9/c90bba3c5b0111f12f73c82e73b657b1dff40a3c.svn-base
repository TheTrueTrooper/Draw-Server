/************************************************
 * File: Main.cs                                *
 * Author: Angelo Sanchez & Dillon Allan        *
 * Description: This is the main UI for the Sox *
 *              Multi Draw client.              *
 *************************************************/
using mdtypes;
using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CMPE2800DAllanASanchezICA07
{
    public partial class Main : Form
    {
        //https://discord.gg/ZTgBA

        #region Delegates & Delegate Types
        /// <summary>
        /// Delegate type used for client updates.
        /// </summary>
        private delegate void delVoidVoid();

        /// <summary>
        /// Delegate used for shutting down socket comms.
        /// </summary>
        private delVoidVoid Recycle = null;
        #endregion

        #region Members
        /// <summary>
        /// Socket used to connect to the server, handling all
        /// send and receive operations.
        /// </summary>
        private Socket TxRxSocket;

        /// <summary>
        /// The Read Thread
        /// </summary>
        private Thread RxThread;

        /// <summary>
        /// Thread used for rendering line segments
        /// to the client graphics.
        /// </summary>
        private Thread RenderThread;

        /// <summary>
        /// Thread used for deserializing received bytes, and
        /// adding new line segments to the render queue.
        /// </summary>
        private Thread DataProcThread;

        /// <summary>
        /// Queue for processing rx buffers.
        /// </summary>
        // private Queue<byte[]> RxBuffs = new Queue<byte[]>(); Try this later when there is time should be thread safe? <-----
        private Queue<byte[]> RxBuffs = new Queue<byte[]>();

        /// <summary>
        /// Queue for holding line segments to render.
        /// </summary>
        //private ConcurrentQueue<LineSegment> RxLineSegs = new ConcurrentQueue<LineSegment>(); Try this later when there is time should be thread safe? <-----
        private Queue<LineSegment> RxLineSegs = new Queue<LineSegment>();
        
        /// <summary>
        /// Flag used for signalling when the user is drawing.
        /// </summary>
        private bool IsDrawing = false;

        /// <summary>
        /// Color used for drawing.
        /// </summary>
        private Color drawColor = Color.Black;

        /// <summary>
        /// Value for line segment thickness.
        /// </summary>
        private ushort Thickness = 1;

        /// <summary>
        /// Maximum thickness of a line segment.
        /// </summary>
        private const int MaxThickness = 2000;

        /// <summary>
        /// Minimum thickness of a line segment
        /// </summary>
        private const int MinThickness = 1;

        /// <summary>
        /// MSDN standard delta value for mouse wheel scrolling.
        /// https://msdn.microsoft.com/en-us/library/system.windows.forms.control.mousewheel(v=vs.110).aspx
        /// </summary>
        private const int ScrollIncrement = 120;

        private static BinaryFormatter BinaryPacker = new BinaryFormatter();
        #endregion

        #region Form Methods
        public Main()
        {
            InitializeComponent();
            
            // set up the UI
            InitUI();

            // assign delegate a call back fct
            Recycle = new delVoidVoid(CBDismantleSocket);
        }

        /// <summary>
        /// Launches a connection dialog for connecting 
        /// to the server.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void _TSL_Conn_Click(object sender, EventArgs e)
        {
            //instance of modal dialog
            Connect C = new Connect();
            //display modal dialog
            C.ShowDialog();
            //User clicked "Try to Connect" button.
            if (C.DialogResult == DialogResult.OK)
            {
                // pass C's connected socket on to the client socket
                TxRxSocket = C.returnSocket;

                // indicate connection success in the UI
                _TSL_Conn.ForeColor = Color.Green;
                _TSL_Conn.Text = "Connected";

                // start the receive thread
                RxThread = new Thread(new ParameterizedThreadStart(RxThreadFunc));
                RxThread.IsBackground = true;
                RxThread.Start(this);

                // start the rx processing thread

                // start the render thread
                RenderThread = new Thread(new ParameterizedThreadStart(RenderThreadFunc));
                RenderThread.IsBackground = true;
                RenderThread.Start(this);

                // start the tx thread

                //Thread.Sleep(20);
            }
        }

        /// <summary>
        /// Updates the draw color.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void _TSL_Color_Click(object sender, EventArgs e)
        {
            UpdateColor();
        }

        /// <summary>
        /// Updates the draw color.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void _TSL_ColorSwatch_Click(object sender, EventArgs e)
        {
            UpdateColor();
        }

        private void Main_MouseDown(object sender, MouseEventArgs e)
        {
            // set the drawing flag
            IsDrawing = true;
        }

        private void Main_MouseUp(object sender, MouseEventArgs e)
        {
            // reset the drawing flag
            IsDrawing = false;
        }

        private void Main_MouseMove(object sender, MouseEventArgs e)
        {
            // don't do anything if not drawing
            if (!IsDrawing)
                return;

            // drawing -- time to create line segments
        }

        /// <summary>
        /// Updates the drawing thickness when the user rolls the mouse wheel.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Main_MouseWheel(object sender, MouseEventArgs e)
        {
            // the mouse wheel delta value is either +120 or -120.
            // let the user change thickness by +/-1 per scroll.

            // however, don't let thickness go over the max, or under 1
            if (Thickness + e.Delta / ScrollIncrement > MaxThickness ||
                Thickness + e.Delta / ScrollIncrement < MinThickness)
                return;

            // not out of range -- set new thickness
            Thickness += (ushort)(e.Delta / ScrollIncrement);

            // update UI
            _TSL_Thickness.Text = $"Thickness: {Thickness}";
        }
        #endregion

        #region Thread Methods
        /// <summary>
        /// Pulls line segments from the queue, and renders them 
        /// to the client graphics, using double buffered rendering.
        /// </summary>
        /// <param name="obj">The main client</param>
        private void RenderThreadFunc(object obj)
        {
            // cast a local copy of the main form
            Main client = (Main)obj;

            // loop while the connection socket is alive
            while (TxRxSocket != null)
            {
                // check if any line segments are available for rendering
                lock (RxLineSegs)
                {
                    // do nothing if there's nothing to do
                    if (RxLineSegs.Count == 0) continue;
                }

                // line segments found -- start double buffered rendering
                using (BufferedGraphicsContext bgc = new BufferedGraphicsContext())
                {
                    // use local client graphics to create back buffer
                    using (BufferedGraphics bg = bgc.Allocate(client.CreateGraphics(), client.ClientRectangle))
                    {
                        // clear the back buffer
                        bg.Graphics.Clear(Color.White);

                        // pull a line segment from the front of the queue
                        LineSegment ls = null;
                        lock (RxLineSegs)
                        {
                            ls = RxLineSegs.Dequeue();
                        }

                        // render the line segment to the back buffer
                        ls.Render(bg.Graphics);

                        // flip the back buffer to Main's graphics
                        // do I need a lock here?
                        // i.e. does this conflict with the main thread?
                        bg.Render();
                    }
                }

                // sleep to force an FPS of ~60fps
                Thread.Sleep(17);
            }
        }

        /// <summary>
        /// The Function that Takes the data
        /// </summary>
        /// <param name="Buffer">The data Buffer</param>
        private static void HandleDataThread(object obj)
        {
            // the client
            Main Client = (Main)obj;
            // a buffer location
            byte[] Buffer;
            // the last postion to use;
            long LastPos = 0;
            // a serailization fail reset point
            long CurrentTryPos = 0;

            using (MemoryStream DataStream = new MemoryStream())
            {
                try
                {
                    while (Client.TxRxSocket != null)
                    {

                        LastPos = DataStream.Position;

                        DataStream.Seek(0, SeekOrigin.End);
                        lock (Client)
                        {
                            Buffer = Client.RxBuffs.Dequeue();
                        }

                        DataStream.Write(Buffer, 0, Buffer.Length);

                        DataStream.Position = LastPos;

                        do
                        {
                            CurrentTryPos = DataStream.Position;
                            try
                            {
                                LineSegment LS = BinaryPacker.Deserialize<>(DataStream);
                                lock (Client.RxLineSegs)
                                    Client.RxLineSegs.Enqueue(LS);
                            }// may loop for ever look int later <--------------------------------------------------------------------------
                            catch (SerializationException SE)
                            {
                                // if there is an error tell us about it but step back as it is prob fragmentaion
                                Console.WriteLine(SE.Message);
                                DataStream.Position = CurrentTryPos;
                                break;
                            }


                        } while (DataStream.Position > DataStream.Length);

                        if (DataStream.Position == DataStream.Length)
                        {
                            //resset all buffers if able or done
                            DataStream.Position = 0;
                            DataStream.SetLength(0);
                        }
                        Thread.Sleep(1); //let others have a turn
                    }
                }
                catch (Exception err)
                {
                    Console.WriteLine(err.Message);// if something supper odd happens tell us
                }
            }
            
        }

        /// <summary>
        /// the thread that will listen and rec
        /// </summary>
        /// <param name="obj">this object to invok from</param>
        private void RxThreadFunc(object obj)
        {
            // create a local instance of the main form
            // using the obj parameter
            Main Client = (Main)obj;

            // create a memory stream for holding fragmented data
            MemoryStream msRxStream = new MemoryStream();

            // create a buffer for storing rx frames
            byte[] rxBuff = new byte[2048];

            // loop while the socket is not null
            while (TxRxSocket != null)
            {
                // try to receive data
                try
                {
                    // receive some data
                    int rxBytesCount = TxRxSocket.Receive(rxBuff);
                    
                    // check for a soft disconnect -- no bytes received
                    if (rxBytesCount == 0)
                    {
                        // send an error msg to the trace
                        Trace.WriteLine("Soft disconnect.");

                        // tell the main UI to disable the socket
                        Client.Recycle.Invoke();

                        // exit thread
                        return;
                    }

                    lock (RxBuffs)
                    {
                        RxBuffs.Enqueue(rxBuff);
                    }
                }

                // receive failed -- hard disconnect
                catch (Exception err)
                {
                    // send error message to stack trace
                    Trace.WriteLine($"Hard disconnect: {err.Message}");

                    // tell the main UI to disable the socket
                    Client.Recycle.Invoke();

                    // exit thread
                    return;
                }
            }
        }
        #endregion

        #region Call Backs
        /// <summary>
        /// Call back function used for dismantling
        /// the client socket.
        /// </summary>
        private void CBDismantleSocket()
        {
            // try to shutdown the socket
            try
            {
                Trace.Write("Attempting to shutdown the socket...");
                TxRxSocket?.Shutdown(SocketShutdown.Both);
                Trace.WriteLine("success.");
                TxRxSocket.Close();
            }

            // shutdown failed
            catch (Exception err)
            {
                // print error msg to trace
                Trace.WriteLine($"Socket shutdown failed: {err.Message}");
            }

            // nullify the socket
            TxRxSocket = null;

            // update the UI
            _TSL_Conn.Text = "No Connection";
        }
        #endregion

        #region Helpers -- Add me to a separate Utils.cs partial class!
        private void InitUI()
        {
            _TSL_Conn.Text = "No Connection";
            _TSL_Conn.ForeColor = Color.Black;
            _TSL_ColorSwatch.ForeColor = drawColor;
            _TSL_Thickness.Text = $"Thickness: {Thickness}";


        }

        /// <summary>
        /// Launches _CD_ColorPicker, which allows the user to
        /// choose a draw color.
        /// </summary>
        private void UpdateColor()
        {
            // show color picker modeless dlg
            DialogResult dr = _CD_ColorPicker.ShowDialog();

            // check for valid color pick
            if (dr == DialogResult.OK)
            {
                // assign new color
                drawColor = _CD_ColorPicker.Color;

                // set prog bar to new color
                _TSL_ColorSwatch.BackColor = drawColor;
            }
        }
        #endregion
    }
}
